#!/bin/sh
# vim: set ft=sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

payload=$(mktemp $TMPDIR/bosh-io-release-resource-request.XXXXXX)

cat > $payload <&0

repository=$(jq -r '.source.repository // ""' < $payload)
version=$(jq -r '.version.version // ""' < $payload)
fetch_tarball=$(jq -r '.params.tarball != false' < $payload)

if [ -z "$repository" ]; then
  echo "must specify source repository"
  exit 1
fi

if [ -z "$version" ]; then
  echo "must specify version"
  exit 1
fi

destination=$1

if [ -z "$destination" ]; then
  echo "usage: $0 <path/to/destination>" >&2
  exit 1
fi

mkdir -p $destination

release_data=$(mktemp $TMPDIR/bosh-io-release.XXXXXX)

curl \
  --silent \
  --retry 5 \
  --fail \
  --location \
  "https://bosh.io/api/v1/releases/github.com/${repository}" | \
  jq 'map(select(.version == $version))[0]' --arg version "$version" > \
  $release_data

url="$(jq -r .url < $release_data)"
sha1="$(jq -r .sha1 < $release_data)"
sha256="$(jq -r '.sha256 // "null"' < $release_data)"

if [ "$url" = "null" ]; then
  echo "version $version not found; aborting"
  exit 1
fi

echo "$url" > $destination/url
echo "$version" > $destination/version
echo "$sha1" > $destination/sha1
if ! [ "$sha256" = "null" ]; then
  echo "$sha256" > $destination/sha256
fi

if [ "$fetch_tarball" = "true" ]; then
  ( cd $destination
    curl --retry 5 --fail -L "$url" -o release.tgz
    if [ "$sha256" = "null" ]; then
      echo "$sha1  release.tgz" | sha1sum -c -
    else
      echo "$sha256  release.tgz" | sha256sum -c -
    fi
  )
fi

jq -n '{
  version: { version: $version },
  metadata: ([
    { name: "url", value: $url },
    { name: "sha1", value: $sha1 },
    { name: "sha256", value: $sha256 }
  ] | map(select(.value != "null")))
}' --arg version "$version" --arg url "$url" --arg sha1 "$sha1" --arg sha256 "$sha256" >&3
